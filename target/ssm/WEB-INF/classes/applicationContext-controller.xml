<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- springmvc开发过程中都会使用注解的方式，所以要开启注解 -->
	<context:component-scan base-package="com.qfedu.controller"></context:component-scan>
	
	<!-- 配置视图解析器：如何将控制器返回的结果字符串，转换为一个物理的视图文件 -->
	<!-- internalResourceViewResolver是一个SpringMVC提供的对象，负责进行转发功能，转发到具体的JSP文件 -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- annotation-driven用于简化开发的配置，注解DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter -->
	<!-- 自动加载RequestMappingHandlerMapping和RequestMappingHandlerAdapter -->
	<mvc:annotation-driven>
		 <!-- 请求时不忽略后缀,针对Spring的弱权限控制，防止用户利用.action .do .xx等(不包括.jsp)这种类型的后缀来恶意访问 -->
		<!-- <mvc:path-matching suffix-pattern="false"/> -->
	</mvc:annotation-driven>
	
	<!-- 
	在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，它会像一个检查员，对进入DispatcherServlet的URL进行筛查
	，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理
	 -->
	<!-- <mvc:default-servlet-handler/> -->
	
	<!-- 由Spring MVC框架自己处理静态资源 -->
	<!-- location表示WebContent目录下的static包下的所有文件 -->
	<!-- mapping表示以/static开头的所有请求路径，如/static/a 或者/static/a/b -->
	<!-- 该配置的作用是：DispatcherServlet不会拦截以/static开头的所有请求路径，并当作静态资源交由Servlet处理。 -->
	<mvc:resources location="/css/" mapping="/css/**"></mvc:resources>
	<mvc:resources location="/img/" mapping="/img/**"></mvc:resources>
	<mvc:resources location="/js/" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/html/" mapping="/html/**"></mvc:resources>
	
	<!-- 配置文件上传解析器
	id必须是"multipartResolver",否则，会报错误：
	java.lang.IllegalArgumentException: Expected MultipartHttpServletRequest: is a MultipartResolver configured?
	 -->
	<bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="defaultEncoding" value="UTF-8"></property>
	<property name="maxUploadSize" value="1024000"></property>
	</bean>

<!--	用于自定义拦截器的声明配置-->
	<mvc:interceptors>
<!--		将自定义拦截器以bean形式声明在mvc:interceptors中，那么springmvc就会将它作为一个拦截器使用，默认范围是所有的处理器-->
<!--		<bean id="excuteTime" class="com.qfedu.interceptor.ExcuteTimeInterceptor"></bean>-->

<!--		指定范围-->
		<mvc:interceptor>
<!--			拦截范围是包括目录和子目录中的路径-->
			<mvc:mapping path="/**"/>
<!--			只表示一个层，当前层的所有路径-->
<!--			<mvc:mapping path="/*"/>-->
<!--			exclude-mapping与mapping相反，表示除了指定路径-->
<!--			<mvc:exclude-mapping path="/*"/>-->
			<bean id="excuteTime" class="com.qfedu.interceptor.ExcuteTimeInterceptor"></bean>


		</mvc:interceptor>
	</mvc:interceptors>

</beans>