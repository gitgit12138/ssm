#DEBUG为定义日志输出级别,TEST为定义到控制台的输出名称,FILE为定义到文件的输出名称,logDB为定义到数据库的输出名称
log4j.rootLogger=ERROR,TEST,FILE,logDB

#定义输出日志到Console控制台  
log4j.appender.TEST=org.apache.log4j.ConsoleAppender
#可以灵活地指定布局模式
log4j.appender.TEST.layout=org.apache.log4j.PatternLayout
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
log4j.appender.TEST.layout.ConversionPattern=%n {%p %n %m %n %c %n %d %n %l}

#定义输出日志到文件
log4j.appender.FILE=org.apache.log4j.FileAppender
#可以灵活地指定布局模式
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
log4j.appender.FILE.layout.ConversionPattern=%n {%p %n %m %n %c %n %d %n %l}
#本地文件路径
log4j.appender.FILE.File=/Users/jayus/Downloads/test.log
#文件内容的编码格式
log4j.appender.FILE.Encoding=UTF-8

#定义输出日志到数据库
log4j.appender.logDB=org.apache.log4j.jdbc.JDBCAppender
#可以灵活地指定布局模式
log4j.appender.logDB.layout=org.apache.log4j.PatternLayout
#数据库驱动
log4j.appender.logDB.Driver=com.mysql.jdbc.Driver
#数据库URL
log4j.appender.logDB.URL=jdbc:mysql://localhost:3306/ssm
#数据库用户名
log4j.appender.logDB.User=root
#数据库密码
log4j.appender.logDB.Password=123
#插入日志信息的SQL语句
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
log4j.appender.logDB.Sql=INSERT INTO log(info,location,happentime)values('%m','%l',now())